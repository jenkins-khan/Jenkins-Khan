<?php



/**
 * Skeleton subclass for performing query and update operations on the 'jenkins_run' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.3 on:
 *
 * Fri Jan 20 17:32:29 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class JenkinsRunPeer extends BaseJenkinsRunPeer
{

  /**
   * Verify and fill number revision from jenkins server
   * for JenkinsRun which doesn't have revision number
   *
   * @static
   *
   * @param Jenkins       $jenkins
   * @param int           $userId
   * @param Criteria|null $criteria
   * 
   * @return void
   */
  public static function fillEmptyJobBuildNumber(Jenkins $jenkins, $userId, Criteria $criteria = null)
  {
    if (null === $criteria)
    {
      $criteria = new Criteria();
    }
    
    $criteria->addJoin(JenkinsRunPeer::JENKINS_GROUP_RUN_ID, JenkinsGroupRunPeer::ID, Criteria::JOIN);
    $criteria->add(JenkinsRunPeer::JOB_BUILD_NUMBER, null, Criteria::ISNULL);
    $criteria->add(JenkinsRunPeer::LAUNCHED, 1, Criteria::EQUAL);
    $criteria->add(JenkinsGroupRunPeer::SF_GUARD_USER_ID, $userId, Criteria::EQUAL);

    $emptyRunsByJobName = array();
    foreach (JenkinsRunPeer::doSelect($criteria) as $run)
    {
      /** @var JenkinsRun $run */
      if ($run->isInJenkinsQueue($jenkins))
      {
        continue;
      }

      $emptyRunsByJobName[$run->getJobName()][$run->getId()] = $run;
    }
    
    foreach ($emptyRunsByJobName as $jobName => $runs)
    {
      $jenkinsJob = $jenkins->getJob($jobName);
      
      foreach ($runs as $run)
      {
        /** @var JenkinsRun $run  */
        foreach ($jenkinsJob->getBuilds() as $build)
        {
          $jenkinsBuild = $jenkinsJob->getJenkinsBuild($build->number);
          
          if ($run->isRelatedToJenkinsBuild($jenkinsBuild))
          {
            $run->setJobBuildNumber($jenkinsBuild->getNumber());
            $run->save();
            break;
          }
        }
      }
    }
  }

  /**
   * @static
   *
   * @param myUser        $user
   * @param Criteria|null $criteria
   *
   * @return JenkinsRun[]
   */
  public static function getDelayed(myUser $user, Criteria $criteria = null)
  {
    if (!$user->isAuthenticated())
    {
      return;
    }
    
    if (null === $criteria)
    {
      $criteria = new Criteria();
    }

    $criteria->addJoin(JenkinsRunPeer::JENKINS_GROUP_RUN_ID, JenkinsGroupRunPeer::ID, Criteria::JOIN);
    $criteria->add(JenkinsGroupRunPeer::SF_GUARD_USER_ID, $user->getUserId(), Criteria::EQUAL);
    $criteria->add(JenkinsRunPeer::LAUNCHED, 0, Criteria::EQUAL);

    return self::doSelect($criteria);
  }
} // JenkinsRunPeer
