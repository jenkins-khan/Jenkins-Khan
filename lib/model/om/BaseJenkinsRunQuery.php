<?php


/**
 * Base class that represents a query for the 'jenkins_run' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.3 on:
 *
 * Tue Feb  7 12:32:23 2012
 *
 * @method     JenkinsRunQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     JenkinsRunQuery orderByJenkinsGroupRunId($order = Criteria::ASC) Order by the jenkins_group_run_id column
 * @method     JenkinsRunQuery orderByJobName($order = Criteria::ASC) Order by the job_name column
 * @method     JenkinsRunQuery orderByJobBuildNumber($order = Criteria::ASC) Order by the job_build_number column
 * @method     JenkinsRunQuery orderByGitBranch($order = Criteria::ASC) Order by the git_branch column
 * @method     JenkinsRunQuery orderByLaunched($order = Criteria::ASC) Order by the launched column
 * @method     JenkinsRunQuery orderByParameters($order = Criteria::ASC) Order by the parameters column
 *
 * @method     JenkinsRunQuery groupById() Group by the id column
 * @method     JenkinsRunQuery groupByJenkinsGroupRunId() Group by the jenkins_group_run_id column
 * @method     JenkinsRunQuery groupByJobName() Group by the job_name column
 * @method     JenkinsRunQuery groupByJobBuildNumber() Group by the job_build_number column
 * @method     JenkinsRunQuery groupByGitBranch() Group by the git_branch column
 * @method     JenkinsRunQuery groupByLaunched() Group by the launched column
 * @method     JenkinsRunQuery groupByParameters() Group by the parameters column
 *
 * @method     JenkinsRunQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     JenkinsRunQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     JenkinsRunQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     JenkinsRunQuery leftJoinJenkinsGroupRun($relationAlias = null) Adds a LEFT JOIN clause to the query using the JenkinsGroupRun relation
 * @method     JenkinsRunQuery rightJoinJenkinsGroupRun($relationAlias = null) Adds a RIGHT JOIN clause to the query using the JenkinsGroupRun relation
 * @method     JenkinsRunQuery innerJoinJenkinsGroupRun($relationAlias = null) Adds a INNER JOIN clause to the query using the JenkinsGroupRun relation
 *
 * @method     JenkinsRun findOne(PropelPDO $con = null) Return the first JenkinsRun matching the query
 * @method     JenkinsRun findOneOrCreate(PropelPDO $con = null) Return the first JenkinsRun matching the query, or a new JenkinsRun object populated from the query conditions when no match is found
 *
 * @method     JenkinsRun findOneById(int $id) Return the first JenkinsRun filtered by the id column
 * @method     JenkinsRun findOneByJenkinsGroupRunId(int $jenkins_group_run_id) Return the first JenkinsRun filtered by the jenkins_group_run_id column
 * @method     JenkinsRun findOneByJobName(string $job_name) Return the first JenkinsRun filtered by the job_name column
 * @method     JenkinsRun findOneByJobBuildNumber(int $job_build_number) Return the first JenkinsRun filtered by the job_build_number column
 * @method     JenkinsRun findOneByGitBranch(string $git_branch) Return the first JenkinsRun filtered by the git_branch column
 * @method     JenkinsRun findOneByLaunched(int $launched) Return the first JenkinsRun filtered by the launched column
 * @method     JenkinsRun findOneByParameters(string $parameters) Return the first JenkinsRun filtered by the parameters column
 *
 * @method     array findById(int $id) Return JenkinsRun objects filtered by the id column
 * @method     array findByJenkinsGroupRunId(int $jenkins_group_run_id) Return JenkinsRun objects filtered by the jenkins_group_run_id column
 * @method     array findByJobName(string $job_name) Return JenkinsRun objects filtered by the job_name column
 * @method     array findByJobBuildNumber(int $job_build_number) Return JenkinsRun objects filtered by the job_build_number column
 * @method     array findByGitBranch(string $git_branch) Return JenkinsRun objects filtered by the git_branch column
 * @method     array findByLaunched(int $launched) Return JenkinsRun objects filtered by the launched column
 * @method     array findByParameters(string $parameters) Return JenkinsRun objects filtered by the parameters column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseJenkinsRunQuery extends ModelCriteria
{
	
	/**
	 * Initializes internal state of BaseJenkinsRunQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'JenkinsRun', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new JenkinsRunQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    JenkinsRunQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof JenkinsRunQuery) {
			return $criteria;
		}
		$query = new JenkinsRunQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key.
	 * Propel uses the instance pool to skip the database if the object exists.
	 * Go fast if the query is untouched.
	 *
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    JenkinsRun|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ($key === null) {
			return null;
		}
		if ((null !== ($obj = JenkinsRunPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
			// the object is alredy in the instance pool
			return $obj;
		}
		if ($con === null) {
			$con = Propel::getConnection(JenkinsRunPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		if ($this->formatter || $this->modelAlias || $this->with || $this->select
		 || $this->selectColumns || $this->asColumns || $this->selectModifiers
		 || $this->map || $this->having || $this->joins) {
			return $this->findPkComplex($key, $con);
		} else {
			return $this->findPkSimple($key, $con);
		}
	}

	/**
	 * Find object by primary key using raw SQL to go fast.
	 * Bypass doSelect() and the object formatter by using generated code.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    JenkinsRun A model object, or null if the key is not found
	 */
	protected function findPkSimple($key, $con)
	{
		$sql = 'SELECT `ID`, `JENKINS_GROUP_RUN_ID`, `JOB_NAME`, `JOB_BUILD_NUMBER`, `GIT_BRANCH`, `LAUNCHED`, `PARAMETERS` FROM `jenkins_run` WHERE `ID` = :p0';
		try {
			$stmt = $con->prepare($sql);
			$stmt->bindValue(':p0', $key, PDO::PARAM_INT);
			$stmt->execute();
		} catch (Exception $e) {
			Propel::log($e->getMessage(), Propel::LOG_ERR);
			throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
		}
		$obj = null;
		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$obj = new JenkinsRun();
			$obj->hydrate($row);
			JenkinsRunPeer::addInstanceToPool($obj, (string) $row[0]);
		}
		$stmt->closeCursor();

		return $obj;
	}

	/**
	 * Find object by primary key.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    JenkinsRun|array|mixed the result, formatted by the current formatter
	 */
	protected function findPkComplex($key, $con)
	{
		// As the query uses a PK condition, no limit(1) is necessary.
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKey($key)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKeys($keys)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->format($stmt);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    JenkinsRunQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(JenkinsRunPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    JenkinsRunQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(JenkinsRunPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterById(1234); // WHERE id = 1234
	 * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
	 * $query->filterById(array('min' => 12)); // WHERE id > 12
	 * </code>
	 *
	 * @param     mixed $id The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JenkinsRunQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(JenkinsRunPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the jenkins_group_run_id column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByJenkinsGroupRunId(1234); // WHERE jenkins_group_run_id = 1234
	 * $query->filterByJenkinsGroupRunId(array(12, 34)); // WHERE jenkins_group_run_id IN (12, 34)
	 * $query->filterByJenkinsGroupRunId(array('min' => 12)); // WHERE jenkins_group_run_id > 12
	 * </code>
	 *
	 * @see       filterByJenkinsGroupRun()
	 *
	 * @param     mixed $jenkinsGroupRunId The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JenkinsRunQuery The current query, for fluid interface
	 */
	public function filterByJenkinsGroupRunId($jenkinsGroupRunId = null, $comparison = null)
	{
		if (is_array($jenkinsGroupRunId)) {
			$useMinMax = false;
			if (isset($jenkinsGroupRunId['min'])) {
				$this->addUsingAlias(JenkinsRunPeer::JENKINS_GROUP_RUN_ID, $jenkinsGroupRunId['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($jenkinsGroupRunId['max'])) {
				$this->addUsingAlias(JenkinsRunPeer::JENKINS_GROUP_RUN_ID, $jenkinsGroupRunId['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(JenkinsRunPeer::JENKINS_GROUP_RUN_ID, $jenkinsGroupRunId, $comparison);
	}

	/**
	 * Filter the query on the job_name column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByJobName('fooValue');   // WHERE job_name = 'fooValue'
	 * $query->filterByJobName('%fooValue%'); // WHERE job_name LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $jobName The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JenkinsRunQuery The current query, for fluid interface
	 */
	public function filterByJobName($jobName = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($jobName)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $jobName)) {
				$jobName = str_replace('*', '%', $jobName);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(JenkinsRunPeer::JOB_NAME, $jobName, $comparison);
	}

	/**
	 * Filter the query on the job_build_number column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByJobBuildNumber(1234); // WHERE job_build_number = 1234
	 * $query->filterByJobBuildNumber(array(12, 34)); // WHERE job_build_number IN (12, 34)
	 * $query->filterByJobBuildNumber(array('min' => 12)); // WHERE job_build_number > 12
	 * </code>
	 *
	 * @param     mixed $jobBuildNumber The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JenkinsRunQuery The current query, for fluid interface
	 */
	public function filterByJobBuildNumber($jobBuildNumber = null, $comparison = null)
	{
		if (is_array($jobBuildNumber)) {
			$useMinMax = false;
			if (isset($jobBuildNumber['min'])) {
				$this->addUsingAlias(JenkinsRunPeer::JOB_BUILD_NUMBER, $jobBuildNumber['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($jobBuildNumber['max'])) {
				$this->addUsingAlias(JenkinsRunPeer::JOB_BUILD_NUMBER, $jobBuildNumber['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(JenkinsRunPeer::JOB_BUILD_NUMBER, $jobBuildNumber, $comparison);
	}

	/**
	 * Filter the query on the git_branch column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByGitBranch('fooValue');   // WHERE git_branch = 'fooValue'
	 * $query->filterByGitBranch('%fooValue%'); // WHERE git_branch LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $gitBranch The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JenkinsRunQuery The current query, for fluid interface
	 */
	public function filterByGitBranch($gitBranch = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($gitBranch)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $gitBranch)) {
				$gitBranch = str_replace('*', '%', $gitBranch);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(JenkinsRunPeer::GIT_BRANCH, $gitBranch, $comparison);
	}

	/**
	 * Filter the query on the launched column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByLaunched(1234); // WHERE launched = 1234
	 * $query->filterByLaunched(array(12, 34)); // WHERE launched IN (12, 34)
	 * $query->filterByLaunched(array('min' => 12)); // WHERE launched > 12
	 * </code>
	 *
	 * @param     mixed $launched The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JenkinsRunQuery The current query, for fluid interface
	 */
	public function filterByLaunched($launched = null, $comparison = null)
	{
		if (is_array($launched)) {
			$useMinMax = false;
			if (isset($launched['min'])) {
				$this->addUsingAlias(JenkinsRunPeer::LAUNCHED, $launched['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($launched['max'])) {
				$this->addUsingAlias(JenkinsRunPeer::LAUNCHED, $launched['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(JenkinsRunPeer::LAUNCHED, $launched, $comparison);
	}

	/**
	 * Filter the query on the parameters column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByParameters('fooValue');   // WHERE parameters = 'fooValue'
	 * $query->filterByParameters('%fooValue%'); // WHERE parameters LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $parameters The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JenkinsRunQuery The current query, for fluid interface
	 */
	public function filterByParameters($parameters = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($parameters)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $parameters)) {
				$parameters = str_replace('*', '%', $parameters);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(JenkinsRunPeer::PARAMETERS, $parameters, $comparison);
	}

	/**
	 * Filter the query by a related JenkinsGroupRun object
	 *
	 * @param     JenkinsGroupRun|PropelCollection $jenkinsGroupRun The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JenkinsRunQuery The current query, for fluid interface
	 */
	public function filterByJenkinsGroupRun($jenkinsGroupRun, $comparison = null)
	{
		if ($jenkinsGroupRun instanceof JenkinsGroupRun) {
			return $this
				->addUsingAlias(JenkinsRunPeer::JENKINS_GROUP_RUN_ID, $jenkinsGroupRun->getId(), $comparison);
		} elseif ($jenkinsGroupRun instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(JenkinsRunPeer::JENKINS_GROUP_RUN_ID, $jenkinsGroupRun->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByJenkinsGroupRun() only accepts arguments of type JenkinsGroupRun or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the JenkinsGroupRun relation
	 *
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    JenkinsRunQuery The current query, for fluid interface
	 */
	public function joinJenkinsGroupRun($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('JenkinsGroupRun');

		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}

		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'JenkinsGroupRun');
		}

		return $this;
	}

	/**
	 * Use the JenkinsGroupRun relation JenkinsGroupRun object
	 *
	 * @see       useQuery()
	 *
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    JenkinsGroupRunQuery A secondary query class using the current class as primary query
	 */
	public function useJenkinsGroupRunQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinJenkinsGroupRun($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'JenkinsGroupRun', 'JenkinsGroupRunQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     JenkinsRun $jenkinsRun Object to remove from the list of results
	 *
	 * @return    JenkinsRunQuery The current query, for fluid interface
	 */
	public function prune($jenkinsRun = null)
	{
		if ($jenkinsRun) {
			$this->addUsingAlias(JenkinsRunPeer::ID, $jenkinsRun->getId(), Criteria::NOT_EQUAL);
		}

		return $this;
	}

} // BaseJenkinsRunQuery